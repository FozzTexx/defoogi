#!/bin/bash
APPDIR=/workspace
IMAGE=$(basename $0):latest
WSUSER=${WSUSER:-wario}

# Detect operating system
detect_os() {
    case "$(uname -s)" in
        Linux*)     echo "linux";;
        Darwin*)    echo "macos";;
        CYGWIN*|MINGW*|MSYS*) echo "windows";;
        *)          echo "unknown";;
    esac
}

OS=$(detect_os)

if [ $# = 0 ] ; then
    echo Please specify what to start
    exit 1
fi

# Check for Windows and show coming soon message
if [ "$OS" = "windows" ]; then
    echo "Windows support coming soon!"
    exit 1
fi

DOCKER_PREFIX="${DOCKER_PREFIX:-fozztexx}"

if [[ "${IMAGE}" != */* ]]; then
    if ! docker image inspect "${IMAGE}" >/dev/null 2>&1 ; then
	IMAGE="${DOCKER_PREFIX}/${IMAGE}"
    fi
fi

# The yocto/windriver scripts will save the working directory
# but aren't smart enough to resolve all symlinks
export PWD=`pwd -P`

ARGS=""

DCKARGS="--privileged --cap-add=SYS_ADMIN --cap-add SYS_PTRACE"

# Platform-specific Docker arguments
if [ "$OS" = "macos" ]; then
    # For macOS, force amd64 platform and use different X11 setup
    DCKARGS="${DCKARGS} --platform linux/amd64"
    # macOS X11 forwarding (requires XQuartz)
    if [ -n "$DISPLAY" ]; then
        DCKARGS="${DCKARGS} -e DISPLAY -v /tmp/.X11-unix:/tmp/.X11-unix --net=host"
    fi
elif [ "$OS" = "linux" ]; then
    # Linux X11 forwarding
    DCKARGS="${DCKARGS} -e DISPLAY -v ${HOME}/.Xauthority:/home/${WSUSER}/.Xauthority --net=host"
fi

DAEMON=0

while [ $# -gt 0 ] && [ "${1:-empty}" != "${1#--}" ] ; do
    case "$1" in
	--shell)
	    ARGS="${ARGS} $1"
	    shift
	    ;;
	--super-shell)
	    ARGS="${ARGS} $1"
	    shift
	    ;;
	--daemon)
	    DCKARGS="${DCKARGS} -d"
	    DAEMON=1
	    shift
	    ;;
    esac
done

# Use interactive -it flag on terminal
if [[ $DAEMON = 0 ]] ; then
    DCKARGS="${DCKARGS} --rm"
    if [[ -t 1 ]] ; then
	DCKARGS="${DCKARGS} -it"
    fi
fi

# Platform-specific network interface detection
get_network_info() {
    if [ "$OS" = "linux" ]; then
        IFACE=$(ip route show default | awk '/default/ {print $5}')
        MACADDR=$(cat /sys/class/net/$IFACE/address)
    elif [ "$OS" = "macos" ]; then
        # Get default route interface on macOS
        IFACE=$(route -n get default | grep interface | awk '{print $2}')
        if [ -n "$IFACE" ]; then
            MACADDR=$(ifconfig $IFACE | grep ether | awk '{print $2}')
        else
            # Fallback: try to get any active interface
            IFACE=$(ifconfig | grep -E '^[a-z]' | grep -v lo0 | head -1 | cut -d: -f1)
            MACADDR=$(ifconfig $IFACE | grep ether | awk '{print $2}')
        fi
    fi
}

get_network_info
if [ -n "$MACADDR" ]; then
    DCKARGS="${DCKARGS} -e MACADDR=${MACADDR}"
fi

HOSTDIR="${PWD}"
DCKARGS=($DCKARGS)
ARGS=($ARGS)
IFS=
DCKARGS+=(-e)
DCKARGS+=(HOSTDIR="${HOSTDIR}")
docker run ${DCKARGS[@]} -v "${HOSTDIR}":"${APPDIR}" ${IMAGE} ${ARGS[@]} $@
STATUS=$?
exit ${STATUS}
